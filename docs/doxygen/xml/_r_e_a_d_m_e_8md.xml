<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.6" xml:lang="en-US">
  <compounddef id="_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>API<sp/>Reference</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Header<sp/>files</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[EF_Driver_Common.h](#file-ef_driver_commonh)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[EF_UART.h](#file-ef_uarth)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[EF_UART_regs.h](#file-ef_uart_regsh)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_Driver_Common.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_C<sp/>header<sp/>file<sp/>for<sp/>common<sp/>driver<sp/>definitions<sp/>and<sp/>types._</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>uint32\_t<sp/>|<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/><sp/>&lt;br&gt;_A<sp/>type<sp/>that<sp/>is<sp/>used<sp/>to<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>driver<sp/>functions._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR**](#define-ef_driver_error)<sp/><sp/>((uint32\_t)1)&lt;br&gt;_Unspecified<sp/>error._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_BUSY**](#define-ef_driver_error_busy)<sp/><sp/>((uint32\_t)2)&lt;br&gt;_Driver<sp/>is<sp/>busy._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_PARAMETER**](#define-ef_driver_error_parameter)<sp/><sp/>((uint32\_t)5)&lt;br&gt;_Parameter<sp/>error._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_SPECIFIC**](#define-ef_driver_error_specific)<sp/><sp/>((uint32\_t)6)&lt;br&gt;_Start<sp/>of<sp/>driver<sp/>specific<sp/>errors._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_TIMEOUT**](#define-ef_driver_error_timeout)<sp/><sp/>((uint32\_t)3)&lt;br&gt;_Timeout<sp/>occurred._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_ERROR\_UNSUPPORTED**](#define-ef_driver_error_unsupported)<sp/><sp/>((uint32\_t)4)&lt;br&gt;_Operation<sp/>not<sp/>supported._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_DRIVER\_OK**](#define-ef_driver_ok)<sp/><sp/>((uint32\_t)0)&lt;br&gt;_Operation<sp/>succeeded._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_DRIVER_STATUS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_A<sp/>type<sp/>that<sp/>is<sp/>used<sp/>to<sp/>return<sp/>the<sp/>status<sp/>of<sp/>the<sp/>driver<sp/>functions._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>uint32_t<sp/>EF_DRIVER_STATUS;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Unspecified<sp/>error._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR<sp/>((uint32_t)1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_BUSY`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Driver<sp/>is<sp/>busy._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_BUSY<sp/>((uint32_t)2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_PARAMETER`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Parameter<sp/>error._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_PARAMETER<sp/>((uint32_t)5)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_SPECIFIC`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Start<sp/>of<sp/>driver<sp/>specific<sp/>errors._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_SPECIFIC<sp/>((uint32_t)6)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_TIMEOUT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Timeout<sp/>occurred._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_TIMEOUT<sp/>((uint32_t)3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_ERROR_UNSUPPORTED`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Operation<sp/>not<sp/>supported._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_ERROR_UNSUPPORTED<sp/>((uint32_t)4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_DRIVER_OK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_Operation<sp/>succeeded._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_DRIVER_OK<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_UART.h</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_C<sp/>header<sp/>file<sp/>for<sp/>UART<sp/>APIs<sp/>which<sp/>contains<sp/>the<sp/>function<sp/>prototypes._</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>enum<sp/><sp/>|<sp/>[**parity\_type**](#enum-parity_type)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_busy**](#function-ef_uart_busy)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>bool<sp/>\*flag)<sp/>&lt;br&gt;_This<sp/>function<sp/>checks<sp/>id<sp/>the<sp/>UART<sp/>is<sp/>busy._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_charsAvailable**](#function-ef_uart_charsavailable)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>bool<sp/>\*flag)<sp/>&lt;br&gt;_This<sp/>function<sp/>returns<sp/>a<sp/>flag<sp/>indicating<sp/>whether<sp/>or<sp/>not<sp/>there<sp/>is<sp/>data<sp/>available<sp/>in<sp/>the<sp/>receive<sp/>FIFO._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_disable**](#function-ef_uart_disable)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_disables<sp/>using<sp/>uart<sp/>by<sp/>clearing<sp/>&quot;en&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_disableGlitchFilter**](#function-ef_uart_disableglitchfilter)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_disables<sp/>glitch<sp/>filter<sp/>(filter<sp/>out<sp/>noise<sp/>or<sp/>glitches<sp/>on<sp/>the<sp/>received<sp/>signal)<sp/>by<sp/>clearing<sp/>&quot;gfen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_disableLoopBack**](#function-ef_uart_disableloopback)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_disables<sp/>loopback<sp/>(connecting<sp/>TX<sp/>to<sp/>RX<sp/>signal)<sp/>by<sp/>clearing<sp/>&quot;lpen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_disableRx**](#function-ef_uart_disablerx)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_disables<sp/>using<sp/>uart<sp/>RX<sp/>by<sp/>clearing<sp/>uart<sp/>&quot;rxen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_disableTx**](#function-ef_uart_disabletx)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_disables<sp/>using<sp/>uart<sp/>TX<sp/>by<sp/>clearing<sp/>uart<sp/>&quot;txen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_enable**](#function-ef_uart_enable)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_enables<sp/>using<sp/>uart<sp/>by<sp/>setting<sp/>&quot;en&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_enableGlitchFilter**](#function-ef_uart_enableglitchfilter)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_enables<sp/>glitch<sp/>filter<sp/>(filter<sp/>out<sp/>noise<sp/>or<sp/>glitches<sp/>on<sp/>the<sp/>received<sp/>signal)<sp/>by<sp/>setting<sp/>&quot;gfen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_enableLoopBack**](#function-ef_uart_enableloopback)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_enables<sp/>loopback<sp/>(connecting<sp/>TX<sp/>to<sp/>RX<sp/>signal)<sp/>by<sp/>setting<sp/>&quot;lpen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_enableRx**](#function-ef_uart_enablerx)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_enables<sp/>using<sp/>uart<sp/>RX<sp/>by<sp/>setting<sp/>uart<sp/>&quot;rxen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_enableTx**](#function-ef_uart_enabletx)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart)<sp/>&lt;br&gt;_enables<sp/>using<sp/>uart<sp/>TX<sp/>by<sp/>setting<sp/>uart<sp/>&quot;txen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getCTRL**](#function-ef_uart_getctrl)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*CTRL\_value)<sp/>&lt;br&gt;_returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>control<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getConfig**](#function-ef_uart_getconfig)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*CFG\_value)<sp/>&lt;br&gt;_returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>configuration<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getIM**](#function-ef_uart_getim)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*IM\_value)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getMIS**](#function-ef_uart_getmis)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*MIS\_value)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getMatchData**](#function-ef_uart_getmatchdata)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*MATCH\_value)<sp/>&lt;br&gt;_returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>match<sp/>data<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getParityMode**](#function-ef_uart_getparitymode)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*parity\_mode)<sp/>&lt;br&gt;_This<sp/>function<sp/>return<sp/>the<sp/>parity<sp/>mode<sp/>of<sp/>the<sp/>UART._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getPrescaler**](#function-ef_uart_getprescaler)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*Prescaler\_value)<sp/>&lt;br&gt;_returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>prescaler_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getRIS**](#function-ef_uart_getris)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*RIS\_value)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getRxCount**](#function-ef_uart_getrxcount)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*RX\_FIFO\_LEVEL\_value)<sp/>&lt;br&gt;_returns<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>RX<sp/>FIFO<sp/>(the<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the<sp/>FIFO)_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getRxFIFOThreshold**](#function-ef_uart_getrxfifothreshold)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*RX\_FIFO\_THRESHOLD\_value)<sp/>&lt;br&gt;_returns<sp/>the<sp/>current<sp/>value<sp/>of<sp/>the<sp/>RX<sp/>FIFO<sp/>threshold_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getTxCount**](#function-ef_uart_gettxcount)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*TX\_FIFO\_LEVEL\_value)<sp/>&lt;br&gt;_returns<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>TX<sp/>FIFO<sp/>(the<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the<sp/>FIFO)_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_getTxFIFOThreshold**](#function-ef_uart_gettxfifothreshold)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>\*TX\_FIFO\_THRESHOLD\_value)<sp/>&lt;br&gt;_returns<sp/>the<sp/>current<sp/>value<sp/>of<sp/>the<sp/>TX<sp/>FIFO<sp/>threshold_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_readChar**](#function-ef_uart_readchar)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uar,<sp/>char<sp/>\*RXDATA\_value)<sp/>&lt;br&gt;_recieve<sp/>a<sp/>single<sp/>character<sp/>through<sp/>uart_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_readCharNonBlocking**](#function-ef_uart_readcharnonblocking)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>char<sp/>\*RXDATA\_value,<sp/>bool<sp/>\*data\_available)<sp/>&lt;br&gt;_This<sp/>is<sp/>a<sp/>non-blocking<sp/>function<sp/>that<sp/>reads<sp/>a<sp/>character<sp/>from<sp/>the<sp/>UART<sp/>receive<sp/>FIFO<sp/>if<sp/>data<sp/>is<sp/>available<sp/>and<sp/>returns<sp/>a<sp/>status<sp/>code._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setCTRL**](#function-ef_uart_setctrl)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setConfig**](#function-ef_uart_setconfig)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>config)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setDataSize**](#function-ef_uart_setdatasize)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_sets<sp/>the<sp/>Data<sp/>Size<sp/>(Data<sp/>word<sp/>length:<sp/>5-9<sp/>bits<sp/>)<sp/>by<sp/>setting<sp/>the<sp/>&quot;wlen&quot;<sp/>field<sp/>in<sp/>configuration<sp/>register_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setGclkEnable**](#function-ef_uart_setgclkenable)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_sets<sp/>the<sp/>GCLK<sp/>enable<sp/>bit<sp/>in<sp/>the<sp/>UART<sp/>register<sp/>to<sp/>a<sp/>certain<sp/>value_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setICR**](#function-ef_uart_seticr)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>mask)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setIM**](#function-ef_uart_setim)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>mask)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setMatchData**](#function-ef_uart_setmatchdata)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>matchData)<sp/>&lt;br&gt;_sets<sp/>the<sp/>matchData<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>at<sp/>which<sp/>&quot;MATCH&quot;<sp/>interrupt<sp/>will<sp/>be<sp/>raised_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setParityType**](#function-ef_uart_setparitytype)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>enum<sp/>[**parity\_type**](#enum-parity_type)<sp/>parity)<sp/>&lt;br&gt;_sets<sp/>the<sp/>&quot;parity&quot;<sp/>field<sp/>in<sp/>configuration<sp/>register<sp/>(could<sp/>be<sp/>none,<sp/>odd,<sp/>even,<sp/>sticky<sp/>0<sp/>or<sp/>sticky<sp/>1)_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setPrescaler**](#function-ef_uart_setprescaler)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>prescaler)<sp/>&lt;br&gt;_sets<sp/>the<sp/>prescaler<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>where<sp/>Baud\_rate<sp/>=<sp/>Bus\_Clock\_Freq/((Prescaler+1)\*16)_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setRxFIFOThreshold**](#function-ef_uart_setrxfifothreshold)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>threshold)<sp/>&lt;br&gt;_sets<sp/>the<sp/>RX<sp/>FIFO<sp/>threshold<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>at<sp/>which<sp/>&quot;RXA&quot;<sp/>interrupt<sp/>will<sp/>be<sp/>raised_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setTimeoutBits**](#function-ef_uart_settimeoutbits)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>value)<sp/>&lt;br&gt;_sets<sp/>the<sp/>&quot;timeout&quot;<sp/>field<sp/>in<sp/>configuration<sp/>register<sp/>which<sp/>is<sp/>receiver<sp/>timeout<sp/>measured<sp/>in<sp/>number<sp/>of<sp/>bits<sp/>at<sp/>which<sp/>the<sp/>timeout<sp/>flag<sp/>will<sp/>be<sp/>raised_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setTwoStopBitsSelect**](#function-ef_uart_settwostopbitsselect)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>bool<sp/>is\_two\_bits)<sp/>&lt;br&gt;_sets<sp/>the<sp/>&quot;stp2&quot;<sp/>bit<sp/>in<sp/>configuration<sp/>register<sp/>(whether<sp/>the<sp/>stop<sp/>boits<sp/>are<sp/>two<sp/>or<sp/>one)_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_setTxFIFOThreshold**](#function-ef_uart_settxfifothreshold)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>uint32\_t<sp/>threshold)<sp/>&lt;br&gt;_sets<sp/>the<sp/>TX<sp/>FIFO<sp/>threshold<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>at<sp/>which<sp/>&quot;TXB&quot;<sp/>interrupt<sp/>will<sp/>be<sp/>raised_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_spaceAvailable**](#function-ef_uart_spaceavailable)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>bool<sp/>\*flag)<sp/>&lt;br&gt;_This<sp/>function<sp/>returns<sp/>a<sp/>flag<sp/>indicating<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>transmit<sp/>is<sp/>available,<sp/>i.e.<sp/>the<sp/>transmit<sp/>FIFO<sp/>is<sp/>not<sp/>full._<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_writeChar**](#function-ef_uart_writechar)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>char<sp/>data)<sp/>&lt;br&gt;_transmit<sp/>a<sp/>single<sp/>character<sp/>through<sp/>uart_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_writeCharArr**](#function-ef_uart_writechararr)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>const<sp/>char<sp/>\*char\_arr)<sp/>&lt;br&gt;_transmit<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>through<sp/>uart_<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/><sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>|<sp/>[**EF\_UART\_writeCharNonBlocking**](#function-ef_uart_writecharnonblocking)<sp/>([**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>uart,<sp/>char<sp/>data,<sp/>bool<sp/>\*data\_sent)<sp/>&lt;br&gt;_This<sp/>is<sp/>a<sp/>non-blocking<sp/>function<sp/>that<sp/>writes<sp/>a<sp/>character<sp/>to<sp/>the<sp/>UART<sp/>transmit<sp/>FIFO<sp/>if<sp/>the<sp/>FIFO<sp/>is<sp/>not<sp/>full<sp/>and<sp/>returns<sp/>a<sp/>status<sp/>code._<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_MAX\_VALUE**](#define-ef_uart_cfg_reg_max_value)<sp/><sp/>((uint32\_t)0x00001FFF)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_TIMEOUT\_MAX\_VALUE**](#define-ef_uart_cfg_reg_timeout_max_value)<sp/><sp/>((uint32\_t)0x0000003F)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_MAX\_VALUE**](#define-ef_uart_ctrl_reg_max_value)<sp/><sp/>((uint32\_t)0x0000001F)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_DataLength\_MAX\_VALUE**](#define-ef_uart_datalength_max_value)<sp/><sp/>((uint32\_t)0x00000009)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_DataLength\_MIN\_VALUE**](#define-ef_uart_datalength_min_value)<sp/><sp/>((uint32\_t)0x00000005)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_IC\_REG\_MAX\_VALUE**](#define-ef_uart_ic_reg_max_value)<sp/><sp/>((uint32\_t)0x000003FF)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_IM\_REG\_MAX\_VALUE**](#define-ef_uart_im_reg_max_value)<sp/><sp/>((uint32\_t)0x000003FF)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_MATCH\_REG\_MAX\_VALUE**](#define-ef_uart_match_reg_max_value)<sp/><sp/>((uint32\_t)0x00001FFF)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_PR\_REG\_MAX\_VALUE**](#define-ef_uart_pr_reg_max_value)<sp/><sp/>((uint32\_t)0x0000FFFF)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RX\_FIFO\_THRESHOLD\_REG\_MAX\_VALUE**](#define-ef_uart_rx_fifo_threshold_reg_max_value)<sp/><sp/>((uint32\_t)0x0000000F)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TX\_FIFO\_THRESHOLD\_REG\_MAX\_VALUE**](#define-ef_uart_tx_fifo_threshold_reg_max_value)<sp/><sp/>((uint32\_t)0x0000000F)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>enum<sp/>`parity_type`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">enum<sp/>parity_type<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>NONE<sp/>=<sp/>0,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ODD<sp/>=<sp/>1,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EVEN<sp/>=<sp/>2,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>STICKY_0<sp/>=<sp/>4,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>STICKY_1<sp/>=<sp/>5</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Functions<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_busy`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_This<sp/>function<sp/>checks<sp/>id<sp/>the<sp/>UART<sp/>is<sp/>busy._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_busy<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*flag</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`flag`<sp/>a<sp/>flag<sp/>indicating<sp/>if<sp/>the<sp/>UART<sp/>is<sp/>busy</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_charsAvailable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_This<sp/>function<sp/>returns<sp/>a<sp/>flag<sp/>indicating<sp/>whether<sp/>or<sp/>not<sp/>there<sp/>is<sp/>data<sp/>available<sp/>in<sp/>the<sp/>receive<sp/>FIFO._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_charsAvailable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*flag</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`flag`<sp/>a<sp/>flag<sp/>indicating<sp/>if<sp/>there<sp/>is<sp/>data<sp/>available<sp/>in<sp/>the<sp/>receive<sp/>FIFO</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_disable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_disables<sp/>using<sp/>uart<sp/>by<sp/>clearing<sp/>&quot;en&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_disable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_disableGlitchFilter`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_disables<sp/>glitch<sp/>filter<sp/>(filter<sp/>out<sp/>noise<sp/>or<sp/>glitches<sp/>on<sp/>the<sp/>received<sp/>signal)<sp/>by<sp/>clearing<sp/>&quot;gfen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_disableGlitchFilter<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_disableLoopBack`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_disables<sp/>loopback<sp/>(connecting<sp/>TX<sp/>to<sp/>RX<sp/>signal)<sp/>by<sp/>clearing<sp/>&quot;lpen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_disableLoopBack<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_disableRx`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_disables<sp/>using<sp/>uart<sp/>RX<sp/>by<sp/>clearing<sp/>uart<sp/>&quot;rxen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_disableRx<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_disableTx`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_disables<sp/>using<sp/>uart<sp/>TX<sp/>by<sp/>clearing<sp/>uart<sp/>&quot;txen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_disableTx<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_enable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_enables<sp/>using<sp/>uart<sp/>by<sp/>setting<sp/>&quot;en&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_enable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_enableGlitchFilter`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_enables<sp/>glitch<sp/>filter<sp/>(filter<sp/>out<sp/>noise<sp/>or<sp/>glitches<sp/>on<sp/>the<sp/>received<sp/>signal)<sp/>by<sp/>setting<sp/>&quot;gfen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_enableGlitchFilter<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_enableLoopBack`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_enables<sp/>loopback<sp/>(connecting<sp/>TX<sp/>to<sp/>RX<sp/>signal)<sp/>by<sp/>setting<sp/>&quot;lpen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_enableLoopBack<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_enableRx`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_enables<sp/>using<sp/>uart<sp/>RX<sp/>by<sp/>setting<sp/>uart<sp/>&quot;rxen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_enableRx<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_enableTx`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_enables<sp/>using<sp/>uart<sp/>TX<sp/>by<sp/>setting<sp/>uart<sp/>&quot;txen&quot;<sp/>bit<sp/>in<sp/>the<sp/>control<sp/>register<sp/>to<sp/>1_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_enableTx<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getCTRL`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>control<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getCTRL<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*CTRL_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`CTRL_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>control<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getConfig`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>configuration<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getConfig<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*CFG_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`CFG_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>configuration<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getIM`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getIM<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*IM_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>Interrupts<sp/>Masking<sp/>Register;<sp/>which<sp/>enable<sp/>and<sp/>disables<sp/>interrupts</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>0<sp/>TXE<sp/>:<sp/>Transmit<sp/>FIFO<sp/>is<sp/>Empty.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>1<sp/>RXF<sp/>:<sp/>Receive<sp/>FIFO<sp/>is<sp/>Full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>2<sp/>TXB<sp/>:<sp/>Transmit<sp/>FIFO<sp/>level<sp/>is<sp/>Below<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>3<sp/>RXA<sp/>:<sp/>Receive<sp/>FIFO<sp/>level<sp/>is<sp/>Above<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>4<sp/>BRK<sp/>:<sp/>Line<sp/>Break;<sp/>13<sp/>consecutive<sp/>0&apos;s<sp/>have<sp/>been<sp/>detected<sp/>on<sp/>the<sp/>line.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>5<sp/>MATCH<sp/>:<sp/>the<sp/>receive<sp/>data<sp/>matches<sp/>the<sp/>MATCH<sp/>register.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>6<sp/>FE<sp/>:<sp/>Framing<sp/>Error,<sp/>the<sp/>receiver<sp/>does<sp/>not<sp/>see<sp/>a<sp/>&quot;stop&quot;<sp/>bit<sp/>at<sp/>the<sp/>expected<sp/>&quot;stop&quot;<sp/>bit<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>7<sp/>PRE<sp/>:<sp/>Parity<sp/>Error;<sp/>the<sp/>receiver<sp/>calculated<sp/>parity<sp/>does<sp/>not<sp/>match<sp/>the<sp/>received<sp/>one.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>8<sp/>OR<sp/>:<sp/>Overrun;<sp/>data<sp/>has<sp/>been<sp/>received<sp/>but<sp/>the<sp/>RX<sp/>FIFO<sp/>is<sp/>full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>9<sp/>RTO<sp/>:<sp/>Receiver<sp/>Timeout;<sp/>no<sp/>data<sp/>has<sp/>been<sp/>received<sp/>for<sp/>the<sp/>time<sp/>of<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`IM_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>Interrupts<sp/>Masking<sp/>Register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getMIS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getMIS<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*MIS_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>Masked<sp/>Interrupt<sp/>Status<sp/>Register</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>0<sp/>TXE<sp/>:<sp/>Transmit<sp/>FIFO<sp/>is<sp/>Empty.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>1<sp/>RXF<sp/>:<sp/>Receive<sp/>FIFO<sp/>is<sp/>Full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>2<sp/>TXB<sp/>:<sp/>Transmit<sp/>FIFO<sp/>level<sp/>is<sp/>Below<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>3<sp/>RXA<sp/>:<sp/>Receive<sp/>FIFO<sp/>level<sp/>is<sp/>Above<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>4<sp/>BRK<sp/>:<sp/>Line<sp/>Break;<sp/>13<sp/>consecutive<sp/>0&apos;s<sp/>have<sp/>been<sp/>detected<sp/>on<sp/>the<sp/>line.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>5<sp/>MATCH<sp/>:<sp/>the<sp/>receive<sp/>data<sp/>matches<sp/>the<sp/>MATCH<sp/>register.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>6<sp/>FE<sp/>:<sp/>Framing<sp/>Error,<sp/>the<sp/>receiver<sp/>does<sp/>not<sp/>see<sp/>a<sp/>&quot;stop&quot;<sp/>bit<sp/>at<sp/>the<sp/>expected<sp/>&quot;stop&quot;<sp/>bit<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>7<sp/>PRE<sp/>:<sp/>Parity<sp/>Error;<sp/>the<sp/>receiver<sp/>calculated<sp/>parity<sp/>does<sp/>not<sp/>match<sp/>the<sp/>received<sp/>one.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>8<sp/>OR<sp/>:<sp/>Overrun;<sp/>data<sp/>has<sp/>been<sp/>received<sp/>but<sp/>the<sp/>RX<sp/>FIFO<sp/>is<sp/>full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>9<sp/>RTO<sp/>:<sp/>Receiver<sp/>Timeout;<sp/>no<sp/>data<sp/>has<sp/>been<sp/>received<sp/>for<sp/>the<sp/>time<sp/>of<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`MIS_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>Masked<sp/>Interrupt<sp/>Status<sp/>Register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getMatchData`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>match<sp/>data<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getMatchData<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*MATCH_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`MATCH_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>match<sp/>data<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getParityMode`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_This<sp/>function<sp/>return<sp/>the<sp/>parity<sp/>mode<sp/>of<sp/>the<sp/>UART._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getParityMode<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*parity_mode</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`parity`<sp/>The<sp/>parity<sp/>mode<sp/>of<sp/>the<sp/>UART</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getPrescaler`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>prescaler_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getPrescaler<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*Prescaler_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`Prescaler_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>prescaler<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getRIS`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getRIS<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*RIS_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">returns<sp/>the<sp/>value<sp/>of<sp/>the<sp/>Raw<sp/>Interrupt<sp/>Status<sp/>Register</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>0<sp/>TXE<sp/>:<sp/>Transmit<sp/>FIFO<sp/>is<sp/>Empty.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>1<sp/>RXF<sp/>:<sp/>Receive<sp/>FIFO<sp/>is<sp/>Full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>2<sp/>TXB<sp/>:<sp/>Transmit<sp/>FIFO<sp/>level<sp/>is<sp/>Below<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>3<sp/>RXA<sp/>:<sp/>Receive<sp/>FIFO<sp/>level<sp/>is<sp/>Above<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>4<sp/>BRK<sp/>:<sp/>Line<sp/>Break;<sp/>13<sp/>consecutive<sp/>0&apos;s<sp/>have<sp/>been<sp/>detected<sp/>on<sp/>the<sp/>line.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>5<sp/>MATCH<sp/>:<sp/>the<sp/>receive<sp/>data<sp/>matches<sp/>the<sp/>MATCH<sp/>register.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>6<sp/>FE<sp/>:<sp/>Framing<sp/>Error,<sp/>the<sp/>receiver<sp/>does<sp/>not<sp/>see<sp/>a<sp/>&quot;stop&quot;<sp/>bit<sp/>at<sp/>the<sp/>expected<sp/>&quot;stop&quot;<sp/>bit<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>7<sp/>PRE<sp/>:<sp/>Parity<sp/>Error;<sp/>the<sp/>receiver<sp/>calculated<sp/>parity<sp/>does<sp/>not<sp/>match<sp/>the<sp/>received<sp/>one.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>8<sp/>OR<sp/>:<sp/>Overrun;<sp/>data<sp/>has<sp/>been<sp/>received<sp/>but<sp/>the<sp/>RX<sp/>FIFO<sp/>is<sp/>full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>9<sp/>RTO<sp/>:<sp/>Receiver<sp/>Timeout;<sp/>no<sp/>data<sp/>has<sp/>been<sp/>received<sp/>for<sp/>the<sp/>time<sp/>of<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`RIS_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>Raw<sp/>Interrupt<sp/>Status<sp/>Register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getRxCount`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_returns<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>RX<sp/>FIFO<sp/>(the<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the<sp/>FIFO)_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getRxCount<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*RX_FIFO_LEVEL_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`RX_FIFO_LEVEL_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>RX<sp/>FIFO<sp/>level<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getRxFIFOThreshold`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_returns<sp/>the<sp/>current<sp/>value<sp/>of<sp/>the<sp/>RX<sp/>FIFO<sp/>threshold_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getRxFIFOThreshold<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*RX_FIFO_THRESHOLD_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`RX_FIFO_THRESHOLD_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>RX<sp/>FIFO<sp/>threshold<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getTxCount`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_returns<sp/>the<sp/>current<sp/>level<sp/>of<sp/>the<sp/>TX<sp/>FIFO<sp/>(the<sp/>number<sp/>of<sp/>bytes<sp/>in<sp/>the<sp/>FIFO)_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getTxCount<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*TX_FIFO_LEVEL_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`TX_FIFO_LEVEL_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>TX<sp/>FIFO<sp/>level<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_getTxFIFOThreshold`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_returns<sp/>the<sp/>current<sp/>value<sp/>of<sp/>the<sp/>TX<sp/>FIFO<sp/>threshold_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_getTxFIFOThreshold<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>*TX_FIFO_THRESHOLD_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`TX_FIFO_THRESHOLD_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>TX<sp/>FIFO<sp/>threshold<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_readChar`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_recieve<sp/>a<sp/>single<sp/>character<sp/>through<sp/>uart_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_readChar<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uar,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*RXDATA_value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`RXDATA_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>received<sp/>character</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_readCharNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_This<sp/>is<sp/>a<sp/>non-blocking<sp/>function<sp/>that<sp/>reads<sp/>a<sp/>character<sp/>from<sp/>the<sp/>UART<sp/>receive<sp/>FIFO<sp/>if<sp/>data<sp/>is<sp/>available<sp/>and<sp/>returns<sp/>a<sp/>status<sp/>code._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_readCharNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>*RXDATA_value,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*data_available</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`RXDATA_value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>received<sp/>character<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data_available`<sp/>A<sp/>flag<sp/>indicating<sp/>if<sp/>data<sp/>is<sp/>available<sp/>in<sp/>the<sp/>receive<sp/>FIFO</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setCTRL`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setCTRL<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sets<sp/>the<sp/>control<sp/>register<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>where</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>0:<sp/>UART<sp/>enable</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>1:<sp/>UART<sp/>Transmitter<sp/>enable</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>2:<sp/>UART<sp/>Receiver<sp/>enable</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>3:<sp/>Loopback<sp/>(connect<sp/>RX<sp/>and<sp/>TX<sp/>pins<sp/>together)<sp/>enable</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>4:<sp/>UART<sp/>Glitch<sp/>Filer<sp/>on<sp/>RX<sp/>enable</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>control<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setConfig`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setConfig<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>config</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sets<sp/>the<sp/>configuration<sp/>register<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>where</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>0-3:<sp/>Data<sp/>word<sp/>length:<sp/>5-9<sp/>bits</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>4:<sp/>Two<sp/>Stop<sp/>Bits<sp/>Select</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>5-7:<sp/>Parity<sp/>Type:<sp/>000:<sp/>None,<sp/>001:<sp/>odd,<sp/>010:<sp/>even,<sp/>100:<sp/>Sticky<sp/>0,<sp/>101:<sp/>Sticky<sp/>1</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>8-13:<sp/>Receiver<sp/>Timeout<sp/>measured<sp/>in<sp/>number<sp/>of<sp/>bits</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`config`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>configuration<sp/>register</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setDataSize`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>Data<sp/>Size<sp/>(Data<sp/>word<sp/>length:<sp/>5-9<sp/>bits<sp/>)<sp/>by<sp/>setting<sp/>the<sp/>&quot;wlen&quot;<sp/>field<sp/>in<sp/>configuration<sp/>register_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setDataSize<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>required<sp/>data<sp/>word<sp/>length<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setGclkEnable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>GCLK<sp/>enable<sp/>bit<sp/>in<sp/>the<sp/>UART<sp/>register<sp/>to<sp/>a<sp/>certain<sp/>value_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setGclkEnable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>GCLK<sp/>enable<sp/>bit</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setICR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setICR<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sets<sp/>the<sp/>value<sp/>of<sp/>the<sp/>Interrupts<sp/>Clear<sp/>Register;<sp/>write<sp/>1<sp/>to<sp/>clear<sp/>the<sp/>flag</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>0<sp/>TXE<sp/>:<sp/>Transmit<sp/>FIFO<sp/>is<sp/>Empty.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>1<sp/>RXF<sp/>:<sp/>Receive<sp/>FIFO<sp/>is<sp/>Full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>2<sp/>TXB<sp/>:<sp/>Transmit<sp/>FIFO<sp/>level<sp/>is<sp/>Below<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>3<sp/>RXA<sp/>:<sp/>Receive<sp/>FIFO<sp/>level<sp/>is<sp/>Above<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>4<sp/>BRK<sp/>:<sp/>Line<sp/>Break;<sp/>13<sp/>consecutive<sp/>0&apos;s<sp/>have<sp/>been<sp/>detected<sp/>on<sp/>the<sp/>line.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>5<sp/>MATCH<sp/>:<sp/>the<sp/>receive<sp/>data<sp/>matches<sp/>the<sp/>MATCH<sp/>register.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>6<sp/>FE<sp/>:<sp/>Framing<sp/>Error,<sp/>the<sp/>receiver<sp/>does<sp/>not<sp/>see<sp/>a<sp/>&quot;stop&quot;<sp/>bit<sp/>at<sp/>the<sp/>expected<sp/>&quot;stop&quot;<sp/>bit<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>7<sp/>PRE<sp/>:<sp/>Parity<sp/>Error;<sp/>the<sp/>receiver<sp/>calculated<sp/>parity<sp/>does<sp/>not<sp/>match<sp/>the<sp/>received<sp/>one.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>8<sp/>OR<sp/>:<sp/>Overrun;<sp/>data<sp/>has<sp/>been<sp/>received<sp/>but<sp/>the<sp/>RX<sp/>FIFO<sp/>is<sp/>full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>9<sp/>RTO<sp/>:<sp/>Receiver<sp/>Timeout;<sp/>no<sp/>data<sp/>has<sp/>been<sp/>received<sp/>for<sp/>the<sp/>time<sp/>of<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`mask`<sp/>The<sp/>required<sp/>mask<sp/>value</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setIM`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setIM<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>mask</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">sets<sp/>the<sp/>value<sp/>of<sp/>the<sp/>Interrupts<sp/>Masking<sp/>Register;<sp/>which<sp/>enable<sp/>and<sp/>disables<sp/>interrupts</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>0<sp/>TXE<sp/>:<sp/>Transmit<sp/>FIFO<sp/>is<sp/>Empty.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>1<sp/>RXF<sp/>:<sp/>Receive<sp/>FIFO<sp/>is<sp/>Full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>2<sp/>TXB<sp/>:<sp/>Transmit<sp/>FIFO<sp/>level<sp/>is<sp/>Below<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>3<sp/>RXA<sp/>:<sp/>Receive<sp/>FIFO<sp/>level<sp/>is<sp/>Above<sp/>Threshold.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>4<sp/>BRK<sp/>:<sp/>Line<sp/>Break;<sp/>13<sp/>consecutive<sp/>0&apos;s<sp/>have<sp/>been<sp/>detected<sp/>on<sp/>the<sp/>line.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>5<sp/>MATCH<sp/>:<sp/>the<sp/>receive<sp/>data<sp/>matches<sp/>the<sp/>MATCH<sp/>register.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>6<sp/>FE<sp/>:<sp/>Framing<sp/>Error,<sp/>the<sp/>receiver<sp/>does<sp/>not<sp/>see<sp/>a<sp/>&quot;stop&quot;<sp/>bit<sp/>at<sp/>the<sp/>expected<sp/>&quot;stop&quot;<sp/>bit<sp/>time.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>7<sp/>PRE<sp/>:<sp/>Parity<sp/>Error;<sp/>the<sp/>receiver<sp/>calculated<sp/>parity<sp/>does<sp/>not<sp/>match<sp/>the<sp/>received<sp/>one.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>8<sp/>OR<sp/>:<sp/>Overrun;<sp/>data<sp/>has<sp/>been<sp/>received<sp/>but<sp/>the<sp/>RX<sp/>FIFO<sp/>is<sp/>full.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>bit<sp/>9<sp/>RTO<sp/>:<sp/>Receiver<sp/>Timeout;<sp/>no<sp/>data<sp/>has<sp/>been<sp/>received<sp/>for<sp/>the<sp/>time<sp/>of<sp/>a<sp/>specified<sp/>number<sp/>of<sp/>bits.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`mask`<sp/>The<sp/>required<sp/>mask<sp/>value</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setMatchData`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>matchData<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>at<sp/>which<sp/>&quot;MATCH&quot;<sp/>interrupt<sp/>will<sp/>be<sp/>raised_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setMatchData<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>matchData</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`matchData`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>required<sp/>match<sp/>data<sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setParityType`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>&quot;parity&quot;<sp/>field<sp/>in<sp/>configuration<sp/>register<sp/>(could<sp/>be<sp/>none,<sp/>odd,<sp/>even,<sp/>sticky<sp/>0<sp/>or<sp/>sticky<sp/>1)_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setParityType<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>enum<sp/>parity_type<sp/>parity</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`parity`<sp/>enum<sp/>parity\_type<sp/>could<sp/>be<sp/>&quot;NONE&quot;<sp/>,<sp/>&quot;ODD&quot;<sp/>,<sp/>&quot;EVEN&quot;<sp/>,<sp/>&quot;STICKY\_0&quot;<sp/>,<sp/>or<sp/>&quot;STICKY\_1&quot;</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setPrescaler`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>prescaler<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>where<sp/>Baud\_rate<sp/>=<sp/>Bus\_Clock\_Freq/((Prescaler+1)\*16)_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setPrescaler<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>prescaler</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`prescaler`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>required<sp/>prescaler</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setRxFIFOThreshold`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>RX<sp/>FIFO<sp/>threshold<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>at<sp/>which<sp/>&quot;RXA&quot;<sp/>interrupt<sp/>will<sp/>be<sp/>raised_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setRxFIFOThreshold<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>threshold</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`threshold`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>required<sp/>threshold</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setTimeoutBits`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>&quot;timeout&quot;<sp/>field<sp/>in<sp/>configuration<sp/>register<sp/>which<sp/>is<sp/>receiver<sp/>timeout<sp/>measured<sp/>in<sp/>number<sp/>of<sp/>bits<sp/>at<sp/>which<sp/>the<sp/>timeout<sp/>flag<sp/>will<sp/>be<sp/>raised_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setTimeoutBits<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>value</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`value`<sp/>timeout<sp/>bits<sp/>value</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setTwoStopBitsSelect`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>&quot;stp2&quot;<sp/>bit<sp/>in<sp/>configuration<sp/>register<sp/>(whether<sp/>the<sp/>stop<sp/>boits<sp/>are<sp/>two<sp/>or<sp/>one)_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setTwoStopBitsSelect<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>is_two_bits</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`is_two_bits`<sp/>bool<sp/>value,<sp/>if<sp/>&quot;true&quot;,<sp/>the<sp/>stop<sp/>bits<sp/>are<sp/>two<sp/>and<sp/>if<sp/>&quot;false&quot;,<sp/>the<sp/>stop<sp/>bit<sp/>is<sp/>one</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_setTxFIFOThreshold`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_sets<sp/>the<sp/>TX<sp/>FIFO<sp/>threshold<sp/>to<sp/>a<sp/>certain<sp/>value<sp/>at<sp/>which<sp/>&quot;TXB&quot;<sp/>interrupt<sp/>will<sp/>be<sp/>raised_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_setTxFIFOThreshold<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>threshold</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`threshold`<sp/>The<sp/>value<sp/>of<sp/>the<sp/>required<sp/>threshold</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_spaceAvailable`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_This<sp/>function<sp/>returns<sp/>a<sp/>flag<sp/>indicating<sp/>whether<sp/>or<sp/>not<sp/>the<sp/>transmit<sp/>is<sp/>available,<sp/>i.e.<sp/>the<sp/>transmit<sp/>FIFO<sp/>is<sp/>not<sp/>full._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_spaceAvailable<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*flag</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`flag`<sp/>a<sp/>flag<sp/>indicating<sp/>if<sp/>the<sp/>transmit<sp/>FIFO<sp/>is<sp/>not<sp/>full</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_writeChar`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_transmit<sp/>a<sp/>single<sp/>character<sp/>through<sp/>uart_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_writeChar<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>data</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>The<sp/>character<sp/>or<sp/>byte<sp/>required<sp/>to<sp/>send</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_writeCharArr`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_transmit<sp/>an<sp/>array<sp/>of<sp/>characters<sp/>through<sp/>uart_</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_writeCharArr<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>char<sp/>*char_arr</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`char_arr`<sp/>An<sp/>array<sp/>of<sp/>characters<sp/>to<sp/>send</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline><highlight class="normal">###<sp/>function<sp/>`EF_UART_writeCharNonBlocking`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">_This<sp/>is<sp/>a<sp/>non-blocking<sp/>function<sp/>that<sp/>writes<sp/>a<sp/>character<sp/>to<sp/>the<sp/>UART<sp/>transmit<sp/>FIFO<sp/>if<sp/>the<sp/>FIFO<sp/>is<sp/>not<sp/>full<sp/>and<sp/>returns<sp/>a<sp/>status<sp/>code._</highlight></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">EF_DRIVER_STATUS<sp/>EF_UART_writeCharNonBlocking<sp/>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>EF_UART_TYPE_PTR<sp/>uart,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>char<sp/>data,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>bool<sp/>*data_sent</highlight></codeline>
<codeline><highlight class="normal">)<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Parameters:**</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">*<sp/>`uart`<sp/>An<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/>,<sp/>which<sp/>points<sp/>to<sp/>the<sp/>base<sp/>memory<sp/>address<sp/>of<sp/>UART<sp/>registers.[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>is<sp/>a<sp/>structure<sp/>that<sp/>contains<sp/>the<sp/>UART<sp/>registers.</highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data`<sp/>The<sp/>character<sp/>or<sp/>byte<sp/>required<sp/>to<sp/>send<sp/></highlight></codeline>
<codeline><highlight class="normal">*<sp/>`data_sent`<sp/>A<sp/>flag<sp/>indicating<sp/>if<sp/>the<sp/>data<sp/>was<sp/>sent<sp/>successfully</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">**Returns:**</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">status<sp/>A<sp/>value<sp/>of<sp/>type<sp/>[**EF\_DRIVER\_STATUS**](#typedef-ef_driver_status)<sp/>:<sp/>returns<sp/>a<sp/>success<sp/>or<sp/>error<sp/>code</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_MAX_VALUE<sp/>((uint32_t)0x00001FFF)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_TIMEOUT_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_TIMEOUT_MAX_VALUE<sp/>((uint32_t)0x0000003F)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_MAX_VALUE<sp/>((uint32_t)0x0000001F)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_DataLength_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_DataLength_MAX_VALUE<sp/>((uint32_t)0x00000009)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_DataLength_MIN_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_DataLength_MIN_VALUE<sp/>((uint32_t)0x00000005)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_IC_REG_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_IC_REG_MAX_VALUE<sp/>((uint32_t)0x000003FF)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_IM_REG_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_IM_REG_MAX_VALUE<sp/>((uint32_t)0x000003FF)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_MATCH_REG_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_MATCH_REG_MAX_VALUE<sp/>((uint32_t)0x00001FFF)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_PR_REG_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_PR_REG_MAX_VALUE<sp/>((uint32_t)0x0000FFFF)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RX_FIFO_THRESHOLD_REG_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RX_FIFO_THRESHOLD_REG_MAX_VALUE<sp/>((uint32_t)0x0000000F)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TX_FIFO_THRESHOLD_REG_MAX_VALUE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TX_FIFO_THRESHOLD_REG_MAX_VALUE<sp/>((uint32_t)0x0000000F)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>File<sp/>EF_UART_regs.h</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>struct<sp/>[**\_EF\_UART\_TYPE\_**](#struct-_ef_uart_type_)<sp/>|<sp/>[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>typedef<sp/>[**EF\_UART\_TYPE**](#typedef-ef_uart_type)<sp/>\*<sp/>|<sp/>[**EF\_UART\_TYPE\_PTR**](#typedef-ef_uart_type_ptr)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>struct<sp/>|<sp/>[**\_EF\_UART\_TYPE\_**](#struct-_ef_uart_type_)<sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">|<sp/>Type<sp/>|<sp/>Name<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>---:<sp/>|<sp/>:---<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_BRK\_FLAG**](#define-ef_uart_brk_flag)<sp/><sp/>((uint32\_t)0x10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_PARITY\_BIT**](#define-ef_uart_cfg_reg_parity_bit)<sp/><sp/>((uint32\_t)5)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_PARITY\_MASK**](#define-ef_uart_cfg_reg_parity_mask)<sp/><sp/>((uint32\_t)0xe0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_STP2\_BIT**](#define-ef_uart_cfg_reg_stp2_bit)<sp/><sp/>((uint32\_t)4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_STP2\_MASK**](#define-ef_uart_cfg_reg_stp2_mask)<sp/><sp/>((uint32\_t)0x10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_TIMEOUT\_BIT**](#define-ef_uart_cfg_reg_timeout_bit)<sp/><sp/>((uint32\_t)8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_TIMEOUT\_MASK**](#define-ef_uart_cfg_reg_timeout_mask)<sp/><sp/>((uint32\_t)0x3f)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_WLEN\_BIT**](#define-ef_uart_cfg_reg_wlen_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CFG\_REG\_WLEN\_MASK**](#define-ef_uart_cfg_reg_wlen_mask)<sp/><sp/>((uint32\_t)0xf)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_EN\_BIT**](#define-ef_uart_ctrl_reg_en_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_EN\_MASK**](#define-ef_uart_ctrl_reg_en_mask)<sp/><sp/>((uint32\_t)0x1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_GFEN\_BIT**](#define-ef_uart_ctrl_reg_gfen_bit)<sp/><sp/>((uint32\_t)4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_GFEN\_MASK**](#define-ef_uart_ctrl_reg_gfen_mask)<sp/><sp/>((uint32\_t)0x10)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_LPEN\_BIT**](#define-ef_uart_ctrl_reg_lpen_bit)<sp/><sp/>((uint32\_t)3)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_LPEN\_MASK**](#define-ef_uart_ctrl_reg_lpen_mask)<sp/><sp/>((uint32\_t)0x8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_RXEN\_BIT**](#define-ef_uart_ctrl_reg_rxen_bit)<sp/><sp/>((uint32\_t)2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_RXEN\_MASK**](#define-ef_uart_ctrl_reg_rxen_mask)<sp/><sp/>((uint32\_t)0x4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_TXEN\_BIT**](#define-ef_uart_ctrl_reg_txen_bit)<sp/><sp/>((uint32\_t)1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_CTRL\_REG\_TXEN\_MASK**](#define-ef_uart_ctrl_reg_txen_mask)<sp/><sp/>((uint32\_t)0x2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_FE\_FLAG**](#define-ef_uart_fe_flag)<sp/><sp/>((uint32\_t)0x40)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_MATCH\_FLAG**](#define-ef_uart_match_flag)<sp/><sp/>((uint32\_t)0x20)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_OR\_FLAG**](#define-ef_uart_or_flag)<sp/><sp/>((uint32\_t)0x100)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_PRE\_FLAG**](#define-ef_uart_pre_flag)<sp/><sp/>((uint32\_t)0x80)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RTO\_FLAG**](#define-ef_uart_rto_flag)<sp/><sp/>((uint32\_t)0x200)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RXA\_FLAG**](#define-ef_uart_rxa_flag)<sp/><sp/>((uint32\_t)0x8)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RXF\_FLAG**](#define-ef_uart_rxf_flag)<sp/><sp/>((uint32\_t)0x2)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RX\_FIFO\_FLUSH\_REG\_FLUSH\_BIT**](#define-ef_uart_rx_fifo_flush_reg_flush_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RX\_FIFO\_FLUSH\_REG\_FLUSH\_MASK**](#define-ef_uart_rx_fifo_flush_reg_flush_mask)<sp/><sp/>((uint32\_t)0x1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RX\_FIFO\_LEVEL\_REG\_LEVEL\_BIT**](#define-ef_uart_rx_fifo_level_reg_level_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RX\_FIFO\_LEVEL\_REG\_LEVEL\_MASK**](#define-ef_uart_rx_fifo_level_reg_level_mask)<sp/><sp/>((uint32\_t)0xf)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RX\_FIFO\_THRESHOLD\_REG\_THRESHOLD\_BIT**](#define-ef_uart_rx_fifo_threshold_reg_threshold_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_RX\_FIFO\_THRESHOLD\_REG\_THRESHOLD\_MASK**](#define-ef_uart_rx_fifo_threshold_reg_threshold_mask)<sp/><sp/>((uint32\_t)0xf)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TXB\_FLAG**](#define-ef_uart_txb_flag)<sp/><sp/>((uint32\_t)0x4)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TXE\_FLAG**](#define-ef_uart_txe_flag)<sp/><sp/>((uint32\_t)0x1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TX\_FIFO\_FLUSH\_REG\_FLUSH\_BIT**](#define-ef_uart_tx_fifo_flush_reg_flush_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TX\_FIFO\_FLUSH\_REG\_FLUSH\_MASK**](#define-ef_uart_tx_fifo_flush_reg_flush_mask)<sp/><sp/>((uint32\_t)0x1)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TX\_FIFO\_LEVEL\_REG\_LEVEL\_BIT**](#define-ef_uart_tx_fifo_level_reg_level_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TX\_FIFO\_LEVEL\_REG\_LEVEL\_MASK**](#define-ef_uart_tx_fifo_level_reg_level_mask)<sp/><sp/>((uint32\_t)0xf)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TX\_FIFO\_THRESHOLD\_REG\_THRESHOLD\_BIT**](#define-ef_uart_tx_fifo_threshold_reg_threshold_bit)<sp/><sp/>((uint32\_t)0)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**EF\_UART\_TX\_FIFO\_THRESHOLD\_REG\_THRESHOLD\_MASK**](#define-ef_uart_tx_fifo_threshold_reg_threshold_mask)<sp/><sp/>((uint32\_t)0xf)&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**IO\_TYPES**](#define-io_types)<sp/><sp/>&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_R**](#define-__r)<sp/><sp/>volatile<sp/>const<sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_RW**](#define-__rw)<sp/><sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline><highlight class="normal">|<sp/>define<sp/><sp/>|<sp/>[**\_\_W**](#define-__w)<sp/><sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32\_t&lt;br&gt;<sp/>|</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Structures<sp/>and<sp/>Types<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_UART_TYPE`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>struct<sp/>_EF_UART_TYPE_<sp/>EF_UART_TYPE;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>typedef<sp/>`EF_UART_TYPE_PTR`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">typedef<sp/>EF_UART_TYPE*<sp/>EF_UART_TYPE_PTR;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>struct<sp/>`_EF_UART_TYPE_`</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Variables:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>CFG<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>CTRL<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>GCLK<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>IC<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_RW**](#define-__rw)<sp/>IM<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>MATCH<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>MIS<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>PR<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>RIS<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>RXDATA<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>RX_FIFO_FLUSH<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>RX_FIFO_LEVEL<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>RX_FIFO_THRESHOLD<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>TXDATA<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>TX_FIFO_FLUSH<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>TX_FIFO_LEVEL<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_W**](#define-__w)<sp/>TX_FIFO_THRESHOLD<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>reserved_0<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>reserved_1<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>reserved_2<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/><sp/>[**\_\_R**](#define-__r)<sp/>reserved_3<sp/><sp/></highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Macros<sp/>Documentation</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_BRK_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_BRK_FLAG<sp/>((uint32_t)0x10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_PARITY_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_PARITY_BIT<sp/>((uint32_t)5)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_PARITY_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_PARITY_MASK<sp/>((uint32_t)0xe0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_STP2_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_STP2_BIT<sp/>((uint32_t)4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_STP2_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_STP2_MASK<sp/>((uint32_t)0x10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_TIMEOUT_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_TIMEOUT_BIT<sp/>((uint32_t)8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_TIMEOUT_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_TIMEOUT_MASK<sp/>((uint32_t)0x3f)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_WLEN_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_WLEN_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CFG_REG_WLEN_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CFG_REG_WLEN_MASK<sp/>((uint32_t)0xf)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_EN_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_EN_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_EN_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_EN_MASK<sp/>((uint32_t)0x1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_GFEN_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_GFEN_BIT<sp/>((uint32_t)4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_GFEN_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_GFEN_MASK<sp/>((uint32_t)0x10)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_LPEN_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_LPEN_BIT<sp/>((uint32_t)3)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_LPEN_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_LPEN_MASK<sp/>((uint32_t)0x8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_RXEN_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_RXEN_BIT<sp/>((uint32_t)2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_RXEN_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_RXEN_MASK<sp/>((uint32_t)0x4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_TXEN_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_TXEN_BIT<sp/>((uint32_t)1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_CTRL_REG_TXEN_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_CTRL_REG_TXEN_MASK<sp/>((uint32_t)0x2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_FE_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_FE_FLAG<sp/>((uint32_t)0x40)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_MATCH_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_MATCH_FLAG<sp/>((uint32_t)0x20)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_OR_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_OR_FLAG<sp/>((uint32_t)0x100)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_PRE_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_PRE_FLAG<sp/>((uint32_t)0x80)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RTO_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RTO_FLAG<sp/>((uint32_t)0x200)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RXA_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RXA_FLAG<sp/>((uint32_t)0x8)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RXF_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RXF_FLAG<sp/>((uint32_t)0x2)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RX_FIFO_FLUSH_REG_FLUSH_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RX_FIFO_FLUSH_REG_FLUSH_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RX_FIFO_FLUSH_REG_FLUSH_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RX_FIFO_FLUSH_REG_FLUSH_MASK<sp/>((uint32_t)0x1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RX_FIFO_LEVEL_REG_LEVEL_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RX_FIFO_LEVEL_REG_LEVEL_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RX_FIFO_LEVEL_REG_LEVEL_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RX_FIFO_LEVEL_REG_LEVEL_MASK<sp/>((uint32_t)0xf)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RX_FIFO_THRESHOLD_REG_THRESHOLD_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RX_FIFO_THRESHOLD_REG_THRESHOLD_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_RX_FIFO_THRESHOLD_REG_THRESHOLD_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_RX_FIFO_THRESHOLD_REG_THRESHOLD_MASK<sp/>((uint32_t)0xf)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TXB_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TXB_FLAG<sp/>((uint32_t)0x4)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TXE_FLAG`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TXE_FLAG<sp/>((uint32_t)0x1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TX_FIFO_FLUSH_REG_FLUSH_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TX_FIFO_FLUSH_REG_FLUSH_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TX_FIFO_FLUSH_REG_FLUSH_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TX_FIFO_FLUSH_REG_FLUSH_MASK<sp/>((uint32_t)0x1)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TX_FIFO_LEVEL_REG_LEVEL_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TX_FIFO_LEVEL_REG_LEVEL_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TX_FIFO_LEVEL_REG_LEVEL_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TX_FIFO_LEVEL_REG_LEVEL_MASK<sp/>((uint32_t)0xf)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TX_FIFO_THRESHOLD_REG_THRESHOLD_BIT`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TX_FIFO_THRESHOLD_REG_THRESHOLD_BIT<sp/>((uint32_t)0)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`EF_UART_TX_FIFO_THRESHOLD_REG_THRESHOLD_MASK`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>EF_UART_TX_FIFO_THRESHOLD_REG_THRESHOLD_MASK<sp/>((uint32_t)0xf)</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`IO_TYPES`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>IO_TYPES<sp/></highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__R`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__R<sp/>volatile<sp/>const<sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__RW`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__RW<sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>define<sp/>`__W`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```c</highlight></codeline>
<codeline><highlight class="normal">#define<sp/>__W<sp/>volatile<sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="README.md"/>
  </compounddef>
</doxygen>
