<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="CF__UART_8c" kind="file" language="C++">
    <compoundname>CF_UART.c</compoundname>
    <includes refid="CF__UART_8h" local="no">CF_UART.h</includes>
    <incdepgraph>
      <node id="1">
        <label>CF_UART.c</label>
        <link refid="CF__UART_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>CF_UART.h</label>
        <link refid="CF__UART_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>CF_UART_regs.h</label>
        <link refid="CF__UART__regs_8h"/>
      </node>
      <node id="5">
        <label>stdbool.h</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="CF__UART_8c_1a727db5e35b43153739077d4568b9f09b" prot="public" static="no">
        <name>CF_UART_C</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="7" column="9" bodyfile="CF_UART.c" bodystart="7" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="CF__UART_8c_1ac8fb76879468f536845efd63dd013023" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_enable</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_enable</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>enables using uart by setting &quot;en&quot; bit in the control register to 1 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="11" column="6" bodyfile="CF_UART.c" bodystart="11" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a906f9de6fa1f7d7a3e251f9c8ecf3ba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_disable</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_disable</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>disables using uart by clearing &quot;en&quot; bit in the control register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="19" column="6" bodyfile="CF_UART.c" bodystart="19" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a27d08acb4a16fe736ec85a6809a8f4cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_enableRx</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_enableRx</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>enables using uart RX by setting uart &quot;rxen&quot; bit in the control register to 1 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="27" column="6" bodyfile="CF_UART.c" bodystart="27" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a8bbcb77cabef3983cca1118db94f33da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_disableRx</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_disableRx</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>disables using uart RX by clearing uart &quot;rxen&quot; bit in the control register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="35" column="6" bodyfile="CF_UART.c" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a9e39d1b67dee9dc4eddecab799f2a73e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_enableTx</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_enableTx</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>enables using uart TX by setting uart &quot;txen&quot; bit in the control register to 1 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="43" column="6" bodyfile="CF_UART.c" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a5fdfa5d0ceaf25c86265f08508d0ac82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_disableTx</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_disableTx</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>disables using uart TX by clearing uart &quot;txen&quot; bit in the control register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="51" column="6" bodyfile="CF_UART.c" bodystart="51" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a5b6c1522111c36f052d01ef8477d8708" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_enableLoopBack</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_enableLoopBack</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>enables loopback (connecting TX to RX signal) by setting &quot;lpen&quot; bit in the control register to 1 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="59" column="6" bodyfile="CF_UART.c" bodystart="59" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a14b502b1b4f32f74147fa27ef594ec5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_disableLoopBack</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_disableLoopBack</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>disables loopback (connecting TX to RX signal) by clearing &quot;lpen&quot; bit in the control register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="67" column="6" bodyfile="CF_UART.c" bodystart="67" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a41e9f0fc22054ed60435b56e07cc2b08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_enableGlitchFilter</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_enableGlitchFilter</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>enables glitch filter (filter out noise or glitches on the received signal) by setting &quot;gfen&quot; bit in the control register to 1 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="75" column="6" bodyfile="CF_UART.c" bodystart="75" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a0b951370140c22de50546112916dbf0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_disableGlitchFilter</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_disableGlitchFilter</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>disables glitch filter (filter out noise or glitches on the received signal) by clearing &quot;gfen&quot; bit in the control register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="86" column="6" bodyfile="CF_UART.c" bodystart="86" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a93420e961b8b16ec1d4e19565a89338f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setCTRL</definition>
        <argsstring>(uint32_t uart_base, int value)</argsstring>
        <name>CF_UART_setCTRL</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the control register to a certain value where<itemizedlist>
<listitem><para>bit 0: UART enable</para>
</listitem><listitem><para>bit 1: UART Transmitter enable</para>
</listitem><listitem><para>bit 2: UART Receiver enable</para>
</listitem><listitem><para>bit 3: Loopback (connect RX and TX pins together) enable</para>
</listitem><listitem><para>bit 4: UART Glitch Filer on RX enable</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the control register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="94" column="6" bodyfile="CF_UART.c" bodystart="94" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1ae932a6f49dc8556119957adf2d230714" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getCTRL</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getCTRL</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the value of the control register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>control register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="102" column="5" bodyfile="CF_UART.c" bodystart="102" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a417529a40a07f0af36ba658f3a31fff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setPrescaler</definition>
        <argsstring>(uint32_t uart_base, int prescaler)</argsstring>
        <name>CF_UART_setPrescaler</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prescaler</declname>
        </param>
        <briefdescription>
<para>sets the prescaler to a certain value where Baud_rate = Bus_Clock_Freq/((Prescaler+1)*16) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prescaler</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the required prescaler </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="109" column="6" bodyfile="CF_UART.c" bodystart="109" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a2d7077f683a7553f9c178ecfd058d1bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getPrescaler</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getPrescaler</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the value of the prescaler </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>prescaler register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="115" column="5" bodyfile="CF_UART.c" bodystart="115" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a29ad6f2b0288e0a90421b7755b4ea6d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setDataSize</definition>
        <argsstring>(uint32_t uart_base, int value)</argsstring>
        <name>CF_UART_setDataSize</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>sets the Data Size (Data word length: 5-9 bits ) by setting the &quot;wlen&quot; field in configuration register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the required data word length <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="122" column="6" bodyfile="CF_UART.c" bodystart="122" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1ad9196d00146f379a9e90b260b4545209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setTwoStopBitsSelect</definition>
        <argsstring>(uint32_t uart_base, bool is_two_bits)</argsstring>
        <name>CF_UART_setTwoStopBitsSelect</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_two_bits</declname>
        </param>
        <briefdescription>
<para>sets the &quot;stp2&quot; bit in configuration register (whether the stop boits are two or one) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_two_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>bool value, if &quot;true&quot;, the stop bits are two and if &quot;false&quot;, the stop bit is one </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="133" column="6" bodyfile="CF_UART.c" bodystart="133" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a61f34f093714af424473fa57fb04cfc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setParityType</definition>
        <argsstring>(uint32_t uart_base, enum parity_type parity)</argsstring>
        <name>CF_UART_setParityType</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>enum <ref refid="CF__UART_8h_1aab5cbb4a185bfe65a14e19beeaba4f10" kindref="member">parity_type</ref></type>
          <declname>parity</declname>
        </param>
        <briefdescription>
<para>sets the &quot;parity&quot; field in configuration register (could be none, odd, even, sticky 0 or sticky 1) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>parity</parametername>
</parameternamelist>
<parameterdescription>
<para>enum parity_type could be &quot;NONE&quot; , &quot;ODD&quot; , &quot;EVEN&quot; , &quot;STICKY_0&quot; , or &quot;STICKY_1&quot; </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="149" column="6" bodyfile="CF_UART.c" bodystart="149" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1ab56dac54958dce9684d6ad1cd26d1018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setTimeoutBits</definition>
        <argsstring>(uint32_t uart_base, int value)</argsstring>
        <name>CF_UART_setTimeoutBits</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>sets the &quot;timeout&quot; field in configuration register which is receiver timeout measured in number of bits at which the timeout flag will be raised </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>timeout bits value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="160" column="6" bodyfile="CF_UART.c" bodystart="160" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a3af6fd4d87a613dcc940fd59c0a6e9fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setConfig</definition>
        <argsstring>(uint32_t uart_base, int value)</argsstring>
        <name>CF_UART_setConfig</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>config</declname>
          <defname>value</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the configuration register to a certain value where<itemizedlist>
<listitem><para>bit 0-3: Data word length: 5-9 bits</para>
</listitem><listitem><para>bit 4: Two Stop Bits Select</para>
</listitem><listitem><para>bit 5-7: Parity Type: 000: None, 001: odd, 010: even, 100: Sticky 0, 101: Sticky 1</para>
</listitem><listitem><para>bit 8-13: Receiver Timeout measured in number of bits</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the configuration register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="171" column="6" bodyfile="CF_UART.c" bodystart="171" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1aae10f814cfbacb6ee771ddcc5b349744" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getConfig</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getConfig</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the value of the configuration register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>configuration register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="178" column="5" bodyfile="CF_UART.c" bodystart="178" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1ab453e751dd18f6e0893998ab546e0eb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setRxFIFOThreshold</definition>
        <argsstring>(uint32_t uart_base, int value)</argsstring>
        <name>CF_UART_setRxFIFOThreshold</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
          <defname>value</defname>
        </param>
        <briefdescription>
<para>sets the RX FIFO threshold to a certain value at which &quot;RXA&quot; interrupt will be raised </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the required threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="184" column="6" bodyfile="CF_UART.c" bodystart="184" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a829e9820f1d010624994aa7590851721" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getRxFIFOThreshold</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getRxFIFOThreshold</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the current value of the RX FIFO threshold </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RX FIFO threshold register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="195" column="5" bodyfile="CF_UART.c" bodystart="195" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1aeb511962317eb5bcb55d2739f13e80ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setTxFIFOThreshold</definition>
        <argsstring>(uint32_t uart_base, int value)</argsstring>
        <name>CF_UART_setTxFIFOThreshold</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>threshold</declname>
          <defname>value</defname>
        </param>
        <briefdescription>
<para>sets the TX FIFO threshold to a certain value at which &quot;TXB&quot; interrupt will be raised </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the required threshold </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="205" column="6" bodyfile="CF_UART.c" bodystart="205" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a6e89a406b1b3cff125032eff26043d3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getTxFIFOThreshold</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getTxFIFOThreshold</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the current value of the TX FIFO threshold </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TX FIFO threshold register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="216" column="5" bodyfile="CF_UART.c" bodystart="216" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1ade8fde5e588c22e9bdf3b68f26469098" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setFIFOControl</definition>
        <argsstring>(uint32_t uart_base, int value)</argsstring>
        <name>CF_UART_setFIFOControl</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the FIFO control register to a certain value where<itemizedlist>
<listitem><para>bit 0-3: Transmit FIFO Level Threshold</para>
</listitem><listitem><para>bit 8-11: Receive FIFO Level Threshold</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the FIFO control register </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="226" column="6" bodyfile="CF_UART.c" bodystart="226" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a044758d0138aeb24c6a87fda9c7de6c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getFIFOControl</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getFIFOControl</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the value of the FIFO control register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FIFO control register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="234" column="5" bodyfile="CF_UART.c" bodystart="234" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1ab67855784d50b5c547378f5d5702c273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getTxCount</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getTxCount</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the current level of the TX FIFO (the number of bytes in the FIFO) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TX FIFO level register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="243" column="5" bodyfile="CF_UART.c" bodystart="243" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1ad473ded49b92582489495c207b425a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getRxCount</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getRxCount</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the current level of the RX FIFO (the number of bytes in the FIFO) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RX FIFO level register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="252" column="5" bodyfile="CF_UART.c" bodystart="252" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a24c0a12c701bbab2594a68148ccaf187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getFIFOStatus</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getFIFOStatus</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the value of the FIFO status register where<itemizedlist>
<listitem><para>bit 0-3: Receive FIFO Level</para>
</listitem><listitem><para>bit 8-11: Transmit FIFO Level</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>FIFO status register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="261" column="5" bodyfile="CF_UART.c" bodystart="261" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a65715703fe82c3f9fb235cf6b0f62e7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setMatchData</definition>
        <argsstring>(uint32_t uart_base, int matchData)</argsstring>
        <name>CF_UART_setMatchData</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>matchData</declname>
        </param>
        <briefdescription>
<para>sets the matchData to a certain value at which &quot;MATCH&quot; interrupt will be raised </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matchData</parametername>
</parameternamelist>
<parameterdescription>
<para>The value of the required match data <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="268" column="6" bodyfile="CF_UART.c" bodystart="268" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a471ea6bce689a667b0415208815a9005" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getMatchData</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getMatchData</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>returns the value of the match data register </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>match data register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="275" column="5" bodyfile="CF_UART.c" bodystart="275" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1afb034e9ca5c75e87df32e77410dfffea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getRIS</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getRIS</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the value of the Raw Interrupt Status Register<itemizedlist>
<listitem><para>bit 0 TXE : Transmit FIFO is Empty.</para>
</listitem><listitem><para>bit 1 RXF : Receive FIFO is Full.</para>
</listitem><listitem><para>bit 2 TXB : Transmit FIFO level is Below Threshold.</para>
</listitem><listitem><para>bit 3 RXA : Receive FIFO level is Above Threshold.</para>
</listitem><listitem><para>bit 4 BRK : Line Break; 13 consecutive 0&apos;s have been detected on the line.</para>
</listitem><listitem><para>bit 5 MATCH : the receive data matches the MATCH register.</para>
</listitem><listitem><para>bit 6 FE : Framing Error, the receiver does not see a &quot;stop&quot; bit at the expected &quot;stop&quot; bit time.</para>
</listitem><listitem><para>bit 7 PRE : Parity Error; the receiver calculated parity does not match the received one.</para>
</listitem><listitem><para>bit 8 OR : Overrun; data has been received but the RX FIFO is full.</para>
</listitem><listitem><para>bit 9 RTO : Receiver Timeout; no data has been received for the time of a specified number of bits.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RIS register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="293" column="5" bodyfile="CF_UART.c" bodystart="293" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a6ffee64b80995aff387251125ebeca80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getMIS</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getMIS</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the value of the Masked Interrupt Status Register<itemizedlist>
<listitem><para>bit 0 TXE : Transmit FIFO is Empty.</para>
</listitem><listitem><para>bit 1 RXF : Receive FIFO is Full.</para>
</listitem><listitem><para>bit 2 TXB : Transmit FIFO level is Below Threshold.</para>
</listitem><listitem><para>bit 3 RXA : Receive FIFO level is Above Threshold.</para>
</listitem><listitem><para>bit 4 BRK : Line Break; 13 consecutive 0&apos;s have been detected on the line.</para>
</listitem><listitem><para>bit 5 MATCH : the receive data matches the MATCH register.</para>
</listitem><listitem><para>bit 6 FE : Framing Error, the receiver does not see a &quot;stop&quot; bit at the expected &quot;stop&quot; bit time.</para>
</listitem><listitem><para>bit 7 PRE : Parity Error; the receiver calculated parity does not match the received one.</para>
</listitem><listitem><para>bit 8 OR : Overrun; data has been received but the RX FIFO is full.</para>
</listitem><listitem><para>bit 9 RTO : Receiver Timeout; no data has been received for the time of a specified number of bits.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>MIS register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="299" column="5" bodyfile="CF_UART.c" bodystart="299" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1af9fd462da652712e3d4c1a356af2b276" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setIM</definition>
        <argsstring>(uint32_t uart_base, int mask)</argsstring>
        <name>CF_UART_setIM</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the value of the Interrupts Masking Register; which enable and disables interrupts<itemizedlist>
<listitem><para>bit 0 TXE : Transmit FIFO is Empty.</para>
</listitem><listitem><para>bit 1 RXF : Receive FIFO is Full.</para>
</listitem><listitem><para>bit 2 TXB : Transmit FIFO level is Below Threshold.</para>
</listitem><listitem><para>bit 3 RXA : Receive FIFO level is Above Threshold.</para>
</listitem><listitem><para>bit 4 BRK : Line Break; 13 consecutive 0&apos;s have been detected on the line.</para>
</listitem><listitem><para>bit 5 MATCH : the receive data matches the MATCH register.</para>
</listitem><listitem><para>bit 6 FE : Framing Error, the receiver does not see a &quot;stop&quot; bit at the expected &quot;stop&quot; bit time.</para>
</listitem><listitem><para>bit 7 PRE : Parity Error; the receiver calculated parity does not match the received one.</para>
</listitem><listitem><para>bit 8 OR : Overrun; data has been received but the RX FIFO is full.</para>
</listitem><listitem><para>bit 9 RTO : Receiver Timeout; no data has been received for the time of a specified number of bits.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The required mask value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="305" column="6" bodyfile="CF_UART.c" bodystart="305" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a19e91976fc7aa7bc0d7aea10f9092c82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_getIM</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_getIM</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the value of the Interrupts Masking Register; which enable and disables interrupts<itemizedlist>
<listitem><para>bit 0 TXE : Transmit FIFO is Empty.</para>
</listitem><listitem><para>bit 1 RXF : Receive FIFO is Full.</para>
</listitem><listitem><para>bit 2 TXB : Transmit FIFO level is Below Threshold.</para>
</listitem><listitem><para>bit 3 RXA : Receive FIFO level is Above Threshold.</para>
</listitem><listitem><para>bit 4 BRK : Line Break; 13 consecutive 0&apos;s have been detected on the line.</para>
</listitem><listitem><para>bit 5 MATCH : the receive data matches the MATCH register.</para>
</listitem><listitem><para>bit 6 FE : Framing Error, the receiver does not see a &quot;stop&quot; bit at the expected &quot;stop&quot; bit time.</para>
</listitem><listitem><para>bit 7 PRE : Parity Error; the receiver calculated parity does not match the received one.</para>
</listitem><listitem><para>bit 8 OR : Overrun; data has been received but the RX FIFO is full.</para>
</listitem><listitem><para>bit 9 RTO : Receiver Timeout; no data has been received for the time of a specified number of bits.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IM register value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="311" column="5" bodyfile="CF_UART.c" bodystart="311" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a71cf6e226bdc78fa9e36f40b4039fe8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_setICR</definition>
        <argsstring>(uint32_t uart_base, int mask)</argsstring>
        <name>CF_UART_setICR</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>sets the value of the Interrupts Clear Register; write 1 to clear the flag<itemizedlist>
<listitem><para>bit 0 TXE : Transmit FIFO is Empty.</para>
</listitem><listitem><para>bit 1 RXF : Receive FIFO is Full.</para>
</listitem><listitem><para>bit 2 TXB : Transmit FIFO level is Below Threshold.</para>
</listitem><listitem><para>bit 3 RXA : Receive FIFO level is Above Threshold.</para>
</listitem><listitem><para>bit 4 BRK : Line Break; 13 consecutive 0&apos;s have been detected on the line.</para>
</listitem><listitem><para>bit 5 MATCH : the receive data matches the MATCH register.</para>
</listitem><listitem><para>bit 6 FE : Framing Error, the receiver does not see a &quot;stop&quot; bit at the expected &quot;stop&quot; bit time.</para>
</listitem><listitem><para>bit 7 PRE : Parity Error; the receiver calculated parity does not match the received one.</para>
</listitem><listitem><para>bit 8 OR : Overrun; data has been received but the RX FIFO is full.</para>
</listitem><listitem><para>bit 9 RTO : Receiver Timeout; no data has been received for the time of a specified number of bits.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>The required mask value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="317" column="6" bodyfile="CF_UART.c" bodystart="317" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a9219a3cffee150f100b55272eaae74da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_writeChar</definition>
        <argsstring>(uint32_t uart_base, char data)</argsstring>
        <name>CF_UART_writeChar</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>char</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>transmit a single character through uart </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The character or byte required to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="324" column="6" bodyfile="CF_UART.c" bodystart="324" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a45b53dbb72f6493a763d6176eb56ef2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CF_UART_writeCharArr</definition>
        <argsstring>(uint32_t uart_base, const char *char_arr)</argsstring>
        <name>CF_UART_writeCharArr</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>char_arr</declname>
        </param>
        <briefdescription>
<para>transmit an array of characters through uart </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>char_arr</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of characters to send </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="332" column="6" bodyfile="CF_UART.c" bodystart="332" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="CF__UART_8c_1a727b43ac98a06b2e2a0c31c305e3e2f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int CF_UART_readChar</definition>
        <argsstring>(uint32_t uart_base)</argsstring>
        <name>CF_UART_readChar</name>
        <param>
          <type>uint32_t</type>
          <declname>uart_base</declname>
        </param>
        <briefdescription>
<para>recieve a single character through uart </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uart_base</parametername>
</parameternamelist>
<parameterdescription>
<para>The base memory address of UART registers. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the byte recieved </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CF_UART.c" line="350" column="5" bodyfile="CF_UART.c" bodystart="350" bodyend="358"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>C file for UART APIs which contains the function implmentations. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>CF_UART_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>CF_UART_C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="CF__UART_8h" kindref="compound">CF_UART.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1ac8fb76879468f536845efd63dd013023" kindref="member">CF_UART_enable</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>enable<sp/>bit<sp/>to<sp/>1<sp/>at<sp/>the<sp/>specified<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a266874a7f0e8f44a104856cc9edf8e1b" kindref="member">CF_UART_CTRL_REG_EN_BIT</ref>);</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a906f9de6fa1f7d7a3e251f9c8ecf3ba1" kindref="member">CF_UART_disable</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>enable<sp/>bit<sp/>using<sp/>the<sp/>specified<sp/><sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>&amp;=<sp/>~CF_UART_CTRL_REG_EN_MASK;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a27d08acb4a16fe736ec85a6809a8f4cf" kindref="member">CF_UART_enableRx</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>enable<sp/>bit<sp/>to<sp/>1<sp/>at<sp/>the<sp/>specified<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a5ced1617f0c81c91c84feb6e67ab7e3f" kindref="member">CF_UART_CTRL_REG_RXEN_BIT</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a8bbcb77cabef3983cca1118db94f33da" kindref="member">CF_UART_disableRx</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>enable<sp/>bit<sp/>using<sp/>the<sp/>specified<sp/><sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>&amp;=<sp/>~CF_UART_CTRL_REG_RXEN_MASK;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a9e39d1b67dee9dc4eddecab799f2a73e" kindref="member">CF_UART_enableTx</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>enable<sp/>bit<sp/>to<sp/>1<sp/>at<sp/>the<sp/>specified<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a4803fa0200e936a1d8f112b1cda3a0be" kindref="member">CF_UART_CTRL_REG_TXEN_BIT</ref>);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a5fdfa5d0ceaf25c86265f08508d0ac82" kindref="member">CF_UART_disableTx</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>enable<sp/>bit<sp/>using<sp/>the<sp/>specified<sp/><sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>&amp;=<sp/>~CF_UART_CTRL_REG_TXEN_MASK;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a5b6c1522111c36f052d01ef8477d8708" kindref="member">CF_UART_enableLoopBack</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>enable<sp/>bit<sp/>to<sp/>1<sp/>at<sp/>the<sp/>specified<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1ad74f6f089ecffe1bee2d4d3dd3f416dc" kindref="member">CF_UART_CTRL_REG_LPEN_BIT</ref>);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a14b502b1b4f32f74147fa27ef594ec5f" kindref="member">CF_UART_disableLoopBack</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>enable<sp/>bit<sp/>using<sp/>the<sp/>specified<sp/><sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>&amp;=<sp/>~CF_UART_CTRL_REG_LPEN_MASK;</highlight></codeline>
<codeline lineno="73"><highlight class="normal">}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a41e9f0fc22054ed60435b56e07cc2b08" kindref="member">CF_UART_enableGlitchFilter</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>enable<sp/>bit<sp/>using<sp/>the<sp/>specified<sp/><sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>&amp;=<sp/>~CF_UART_CTRL_REG_GFEN_MASK;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>enable<sp/>bit<sp/>to<sp/>1<sp/>at<sp/>the<sp/>specified<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a5f47e9ee6518199926ec8b11ecdaac8c" kindref="member">CF_UART_CTRL_REG_GFEN_BIT</ref>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal">}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a0b951370140c22de50546112916dbf0f" kindref="member">CF_UART_disableGlitchFilter</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>enable<sp/>bit<sp/>using<sp/>the<sp/>specified<sp/><sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>&amp;=<sp/>~CF_UART_CTRL_REG_GFEN_MASK;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a93420e961b8b16ec1d4e19565a89338f" kindref="member">CF_UART_setCTRL</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1ae932a6f49dc8556119957adf2d230714" kindref="member">CF_UART_getCTRL</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1aaf3574c53f189c64c14ccfb846aed421" kindref="member">CTRL</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a417529a40a07f0af36ba658f3a31fff5" kindref="member">CF_UART_setPrescaler</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prescaler){</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1ab2ed350e6f2da615799df38abd839c27" kindref="member">PR</ref><sp/>=<sp/>prescaler;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a2d7077f683a7553f9c178ecfd058d1bd" kindref="member">CF_UART_getPrescaler</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1ab2ed350e6f2da615799df38abd839c27" kindref="member">PR</ref>);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a29ad6f2b0288e0a90421b7755b4ea6d7" kindref="member">CF_UART_setDataSize</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>field<sp/>bits<sp/>in<sp/>the<sp/>register<sp/>using<sp/>the<sp/>defined<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>&amp;=<sp/>~CF_UART_CFG_REG_WLEN_MASK;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>bits<sp/>with<sp/>the<sp/>given<sp/>value<sp/>at<sp/>the<sp/>defined<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>|=<sp/>((value<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a0b828c908bc0843a0e9229adfcb29863" kindref="member">CF_UART_CFG_REG_WLEN_BIT</ref>)<sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1adba653133ac3677b18091f8ad0b3c6f2" kindref="member">CF_UART_CFG_REG_WLEN_MASK</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1ad9196d00146f379a9e90b260b4545209" kindref="member">CF_UART_setTwoStopBitsSelect</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_two_bits){</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_two_bits){</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>the<sp/>enable<sp/>bit<sp/>to<sp/>1<sp/>at<sp/>the<sp/>specified<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>|=<sp/>(1<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a16e0c9d637210b71aa88aa9f344d5f6e" kindref="member">CF_UART_CFG_REG_STP2_BIT</ref>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>enable<sp/>bit<sp/>using<sp/>the<sp/>specified<sp/><sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>&amp;=<sp/>~CF_UART_CFG_REG_STP2_MASK;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a61f34f093714af424473fa57fb04cfc5" kindref="member">CF_UART_setParityType</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8h_1aab5cbb4a185bfe65a14e19beeaba4f10" kindref="member">parity_type</ref><sp/>parity){</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>field<sp/>bits<sp/>in<sp/>the<sp/>register<sp/>using<sp/>the<sp/>defined<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>&amp;=<sp/>~CF_UART_CFG_REG_PARITY_MASK;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>bits<sp/>with<sp/>the<sp/>given<sp/>value<sp/>at<sp/>the<sp/>defined<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>|=<sp/>((parity<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a385a3de23966fe78d4f7c08ce196ad15" kindref="member">CF_UART_CFG_REG_PARITY_BIT</ref>)<sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1a798e3d66249e9defd1eaae7cde9b4d44" kindref="member">CF_UART_CFG_REG_PARITY_MASK</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1ab56dac54958dce9684d6ad1cd26d1018" kindref="member">CF_UART_setTimeoutBits</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>field<sp/>bits<sp/>in<sp/>the<sp/>register<sp/>using<sp/>the<sp/>defined<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>&amp;=<sp/>~CF_UART_CFG_REG_TIMEOUT_MASK;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>bits<sp/>with<sp/>the<sp/>given<sp/>value<sp/>at<sp/>the<sp/>defined<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>|=<sp/>((value<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1afaa9ea2f3ab4ff8647532935574bcd88" kindref="member">CF_UART_CFG_REG_TIMEOUT_BIT</ref>)<sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1ad0c0bdddadfd3a44d43b5d7813af277d" kindref="member">CF_UART_CFG_REG_TIMEOUT_MASK</ref>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a3af6fd4d87a613dcc940fd59c0a6e9fa" kindref="member">CF_UART_setConfig</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1aae10f814cfbacb6ee771ddcc5b349744" kindref="member">CF_UART_getConfig</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1a419b02d7f3175d7386fbb78c635d2cff" kindref="member">CFG</ref>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1ab453e751dd18f6e0893998ab546e0eb0" kindref="member">CF_UART_setRxFIFOThreshold</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>field<sp/>bits<sp/>in<sp/>the<sp/>register<sp/>using<sp/>the<sp/>defined<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a5f48f387b4dc63014e4380eb51f4c33b" kindref="member">FIFOCTRL</ref><sp/>&amp;=<sp/>~CF_UART_FIFOCTRL_REG_RXLT_MASK;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>bits<sp/>with<sp/>the<sp/>given<sp/>value<sp/>at<sp/>the<sp/>defined<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a5f48f387b4dc63014e4380eb51f4c33b" kindref="member">FIFOCTRL</ref><sp/>|=<sp/>((value<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a7e595dafa06d084074a25de5721bd9ab" kindref="member">CF_UART_FIFOCTRL_REG_RXLT_BIT</ref>)<sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1a3d1d577c97f279d55c8dd912417042e8" kindref="member">CF_UART_FIFOCTRL_REG_RXLT_MASK</ref>);</highlight></codeline>
<codeline lineno="193"><highlight class="normal">}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a829e9820f1d010624994aa7590851721" kindref="member">CF_UART_getRxFIFOThreshold</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rx_level_th<sp/>=<sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1a5f48f387b4dc63014e4380eb51f4c33b" kindref="member">FIFOCTRL</ref><sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1a3d1d577c97f279d55c8dd912417042e8" kindref="member">CF_UART_FIFOCTRL_REG_RXLT_MASK</ref>)<sp/>&gt;&gt;<sp/><ref refid="CF__UART__regs_8h_1a7e595dafa06d084074a25de5721bd9ab" kindref="member">CF_UART_FIFOCTRL_REG_RXLT_BIT</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rx_level_th);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1aeb511962317eb5bcb55d2739f13e80ad" kindref="member">CF_UART_setTxFIFOThreshold</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>field<sp/>bits<sp/>in<sp/>the<sp/>register<sp/>using<sp/>the<sp/>defined<sp/>mask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a5f48f387b4dc63014e4380eb51f4c33b" kindref="member">FIFOCTRL</ref><sp/>&amp;=<sp/>~CF_UART_FIFOCTRL_REG_TXLT_MASK;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>bits<sp/>with<sp/>the<sp/>given<sp/>value<sp/>at<sp/>the<sp/>defined<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a5f48f387b4dc63014e4380eb51f4c33b" kindref="member">FIFOCTRL</ref><sp/>|=<sp/>((value<sp/>&lt;&lt;<sp/><ref refid="CF__UART__regs_8h_1a69c312c946bec91e3cea12cb9e66cdc0" kindref="member">CF_UART_FIFOCTRL_REG_TXLT_BIT</ref>)<sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1a1bf32ffbed1f291bbd4df32b64c975cc" kindref="member">CF_UART_FIFOCTRL_REG_TXLT_MASK</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal">}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a6e89a406b1b3cff125032eff26043d3d" kindref="member">CF_UART_getTxFIFOThreshold</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx_level_th<sp/>=<sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1a5f48f387b4dc63014e4380eb51f4c33b" kindref="member">FIFOCTRL</ref><sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1a1bf32ffbed1f291bbd4df32b64c975cc" kindref="member">CF_UART_FIFOCTRL_REG_TXLT_MASK</ref>)<sp/>&gt;&gt;<sp/><ref refid="CF__UART__regs_8h_1a69c312c946bec91e3cea12cb9e66cdc0" kindref="member">CF_UART_FIFOCTRL_REG_TXLT_BIT</ref>;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tx_level_th);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1ade8fde5e588c22e9bdf3b68f26469098" kindref="member">CF_UART_setFIFOControl</ref><sp/>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value){</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a5f48f387b4dc63014e4380eb51f4c33b" kindref="member">FIFOCTRL</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a044758d0138aeb24c6a87fda9c7de6c6" kindref="member">CF_UART_getFIFOControl</ref><sp/>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1a5f48f387b4dc63014e4380eb51f4c33b" kindref="member">FIFOCTRL</ref>)<sp/>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1ab67855784d50b5c547378f5d5702c273" kindref="member">CF_UART_getTxCount</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tx_level<sp/>=<sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1ac95e4f7543a0aed3ee5277c2096af20a" kindref="member">FIFOS</ref><sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1a4bcda73b2207720bd3b1212fc047337a" kindref="member">CF_UART_FIFOS_REG_TXL_MASK</ref>)<sp/>&gt;&gt;<sp/><ref refid="CF__UART__regs_8h_1a61be2c6547b44c7a6655abc3a82ad8d7" kindref="member">CF_UART_FIFOS_REG_TXL_BIT</ref>;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(tx_level);</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1ad473ded49b92582489495c207b425a01" kindref="member">CF_UART_getRxCount</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rx_level<sp/>=<sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1ac95e4f7543a0aed3ee5277c2096af20a" kindref="member">FIFOS</ref><sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1a678dfcd394bda6fdccea37a799177325" kindref="member">CF_UART_FIFOS_REG_RXL_MASK</ref>)<sp/>&gt;&gt;<sp/><ref refid="CF__UART__regs_8h_1a643adcc29f4cb4f27f47117c59065edf" kindref="member">CF_UART_FIFOS_REG_RXL_BIT</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(rx_level);</highlight></codeline>
<codeline lineno="259"><highlight class="normal">}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a24c0a12c701bbab2594a68148ccaf187" kindref="member">CF_UART_getFIFOStatus</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1ac95e4f7543a0aed3ee5277c2096af20a" kindref="member">FIFOS</ref>);</highlight></codeline>
<codeline lineno="266"><highlight class="normal">}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a65715703fe82c3f9fb235cf6b0f62e7b" kindref="member">CF_UART_setMatchData</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>matchData){</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aa4c42f2e242b0eca1910fb9584e1284f" kindref="member">MATCH</ref><sp/>=<sp/>matchData;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a471ea6bce689a667b0415208815a9005" kindref="member">CF_UART_getMatchData</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1aa4c42f2e242b0eca1910fb9584e1284f" kindref="member">MATCH</ref>);</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>Interrupts<sp/>bits<sp/>in<sp/>RIS,<sp/>MIS,<sp/>IM,<sp/>and<sp/>ICR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>0:<sp/>TX<sp/>FIFO<sp/>is<sp/>Empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>1:<sp/>TX<sp/>FIFO<sp/>level<sp/>is<sp/>below<sp/>the<sp/>value<sp/>in<sp/>the<sp/>TX<sp/>FIFO<sp/>Level<sp/>Threshold<sp/>Register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>2:<sp/>RX<sp/>FIFO<sp/>is<sp/>Full</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>3:<sp/>RX<sp/>FIFO<sp/>level<sp/>is<sp/>above<sp/>the<sp/>value<sp/>in<sp/>the<sp/>RX<sp/>FIFO<sp/>Level<sp/>Threshold<sp/>Register</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>4:<sp/>line<sp/>break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>5:<sp/>match</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>6:<sp/>frame<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>7:<sp/>parity<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>8:<sp/>overrun<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>9:<sp/>timeout<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1afb034e9ca5c75e87df32e77410dfffea" kindref="member">CF_UART_getRIS</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1a0b77ac9024109a44412fea686355cd62" kindref="member">ris</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a6ffee64b80995aff387251125ebeca80" kindref="member">CF_UART_getMIS</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1af280d3fb7ed14be350dc97821dbacb1e" kindref="member">mis</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal">}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1af9fd462da652712e3d4c1a356af2b276" kindref="member">CF_UART_setIM</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask){</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a92173860adcbbdea07bb55da2f91f347" kindref="member">im</ref><sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a19e91976fc7aa7bc0d7aea10f9092c82" kindref="member">CF_UART_getIM</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1a92173860adcbbdea07bb55da2f91f347" kindref="member">im</ref>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a71cf6e226bdc78fa9e36f40b4039fe8e" kindref="member">CF_UART_setICR</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>(uart-&gt;<ref refid="struct__CF__UART__TYPE___1a8a399eff288117f64c79c9c1b0213d09" kindref="member">icr</ref>)<sp/>|=<sp/>mask;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a9219a3cffee150f100b55272eaae74da" kindref="member">CF_UART_writeChar</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>data){</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((<ref refid="CF__UART_8c_1afb034e9ca5c75e87df32e77410dfffea" kindref="member">CF_UART_getRIS</ref>(uart_base)<sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1af0ef9bb61d418f4ec8031e74ac1374f3" kindref="member">CF_UART_TXE_FLAG</ref>)<sp/>==<sp/>0x0);<sp/></highlight><highlight class="comment">//<sp/>wait<sp/>until<sp/>TX<sp/>empty<sp/>flag<sp/>is<sp/>1<sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a99fca397943293a7c803a989f17a51f5" kindref="member">TXDATA</ref><sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CF__UART_8c_1a71cf6e226bdc78fa9e36f40b4039fe8e" kindref="member">CF_UART_setICR</ref>(uart_base,<sp/><ref refid="CF__UART__regs_8h_1af0ef9bb61d418f4ec8031e74ac1374f3" kindref="member">CF_UART_TXE_FLAG</ref>);</highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a45b53dbb72f6493a763d6176eb56ef2a" kindref="member">CF_UART_writeCharArr</ref>(uint32_t<sp/>uart_base,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*char_arr){</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(*char_arr){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((<ref refid="CF__UART_8c_1afb034e9ca5c75e87df32e77410dfffea" kindref="member">CF_UART_getRIS</ref>(uart_base)<sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1a1d10765fcb44dabc4653269f5f45d7e0" kindref="member">CF_UART_TXB_FLAG</ref>)<sp/>==<sp/>0x0);<sp/></highlight><highlight class="comment">//<sp/>wait<sp/>until<sp/>tx<sp/>level<sp/>below<sp/>flag<sp/>is<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1a99fca397943293a7c803a989f17a51f5" kindref="member">TXDATA</ref><sp/>=<sp/>(*(char_arr++));</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="CF__UART_8c_1a71cf6e226bdc78fa9e36f40b4039fe8e" kindref="member">CF_UART_setICR</ref>(uart_base,<sp/><ref refid="CF__UART__regs_8h_1a1d10765fcb44dabc4653269f5f45d7e0" kindref="member">CF_UART_TXB_FLAG</ref>);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight><highlight class="comment">/*void<sp/>CF_UART_writeInt(uint32_t<sp/>uart_base,<sp/>char<sp/>data){</highlight></codeline>
<codeline lineno="343"><highlight class="comment"></highlight></codeline>
<codeline lineno="344"><highlight class="comment"><sp/><sp/><sp/><sp/>CF_UART_TYPE*<sp/>uart<sp/>=<sp/>(CF_UART_TYPE*)uart_base;</highlight></codeline>
<codeline lineno="345"><highlight class="comment"><sp/><sp/><sp/><sp/>while((CF_UART_getRIS(uart_base)<sp/>&amp;<sp/>0x2)<sp/>==<sp/>0x0);<sp/>//<sp/>wait<sp/>when<sp/>level<sp/>is<sp/>above<sp/>threshold<sp/>(fifo<sp/>is<sp/>full)</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/>uart-&gt;txdata<sp/>=<sp/>data;</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/>CF_UART_setICR(uart_base,<sp/>0x2);</highlight></codeline>
<codeline lineno="348"><highlight class="comment">}*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="CF__UART_8c_1a727b43ac98a06b2e2a0c31c305e3e2f9" kindref="member">CF_UART_readChar</ref>(uint32_t<sp/>uart_base){</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*<sp/>uart<sp/>=<sp/>(<ref refid="struct__CF__UART__TYPE__" kindref="compound">CF_UART_TYPE</ref>*)uart_base;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">((<ref refid="CF__UART_8c_1afb034e9ca5c75e87df32e77410dfffea" kindref="member">CF_UART_getRIS</ref>(uart_base)<sp/>&amp;<sp/><ref refid="CF__UART__regs_8h_1afcc839803a3e147726c4d0ff8aa631ac" kindref="member">CF_UART_RXA_FLAG</ref>)<sp/>==<sp/>0x0);<sp/></highlight><highlight class="comment">//<sp/>wait<sp/>over<sp/>RX<sp/>fifo<sp/>level<sp/>above<sp/>flag<sp/>to<sp/>be<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>data<sp/>=<sp/>uart-&gt;<ref refid="struct__CF__UART__TYPE___1aff46d22baad8d54ad1615dbac2c9b905" kindref="member">RXDATA</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="CF__UART_8c_1a71cf6e226bdc78fa9e36f40b4039fe8e" kindref="member">CF_UART_setICR</ref>(uart_base,<sp/><ref refid="CF__UART__regs_8h_1afcc839803a3e147726c4d0ff8aa631ac" kindref="member">CF_UART_RXA_FLAG</ref>);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>CF_UART_C</highlight></codeline>
    </programlisting>
    <location file="CF_UART.c"/>
  </compounddef>
</doxygen>
