
/*
	Copyright 2023 efabless

	Author: Mohamed Shalan (mshalan@efabless.com)

	This file is auto-generated by wrapper_gen.py

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	    http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.

*/


`timescale			1ns/1ns
`default_nettype	none

`define		WB_BLOCK(name, init)	always @(posedge clk_i or posedge rst_i) if(rst_i) name <= init;
`define		WB_REG(name, init)		`WB_BLOCK(name, init) else if(wb_we & (adr_i==``name``_ADDR)) name <= dat_i;
`define		WB_ICR(sz)				`WB_BLOCK(ICR_REG, sz'b0) else if(wb_we & (adr_i==ICR_REG_ADDR)) ICR_REG <= dat_i; else ICR_REG <= sz'd0;

module EF_UART_wb (
	input	wire 		RX,
	output	wire 		TX,
	input	wire 		clk_i,
	input	wire 		rst_i,
	input	wire [31:0]	adr_i,
	input	wire [31:0]	dat_i,
	output	wire [31:0]	dat_o,
	input	wire [3:0]	sel_i,
	input	wire 		cyc_i,
	input	wire 		stb_i,
	output	reg 		ack_o,
	input	wire 		we_i,
	output	wire 		irq
);
	localparam[15:0] DATA_REG_ADDR = 16'h0000;
	localparam[15:0] PRESCALE_REG_ADDR = 16'h0004;
	localparam[15:0] TXFIFOTR_REG_ADDR = 16'h0008;
	localparam[15:0] RXFIFOTR_REG_ADDR = 16'h000c;
	localparam[15:0] CONTROL_REG_ADDR = 16'h0010;
	localparam[15:0] ICR_REG_ADDR = 16'h0f00;
	localparam[15:0] RIS_REG_ADDR = 16'h0f04;
	localparam[15:0] IM_REG_ADDR = 16'h0f08;
	localparam[15:0] MIS_REG_ADDR = 16'h0f0c;

	reg	[7:0]	DATA_REG;
	reg	[15:0]	PRESCALE_REG;
	reg	[3:0]	TXFIFOTR_REG;
	reg	[3:0]	RXFIFOTR_REG;
	reg			CONTROL_REG;
	reg	[5:0]	RIS_REG;
	reg	[5:0]	ICR_REG;
	reg	[5:0]	IM_REG;

	wire[6:0]	wdata	= DATA_REG[6:0];
	wire[14:0]	prescale	= PRESCALE_REG[14:0];
	wire[3:0]	txfifotr	= TXFIFOTR_REG[3:0];
	wire[3:0]	rxfifotr	= RXFIFOTR_REG[3:0];
	wire		en	= CONTROL_REG[0:0];
	wire		to_flag;
	wire		_TX_EMPTY_FLAG_FLAG_	= to_flag;
	wire		match_flag;
	wire		_TX_FULL_FLAG_FLAG_	= match_flag;
	wire		cp_flag;
	wire		_TX_BELOW_FLAG_FLAG_	= cp_flag;
	wire		cp_flag;
	wire		_RX_EMPTY_FLAG_FLAG_	= cp_flag;
	wire		match_flag;
	wire		_RX_FULL_FLAG_FLAG_	= match_flag;
	wire		cp_flag;
	wire		_RX_BELOW_FLAG_FLAG_	= cp_flag;
	wire[5:0]	MIS_REG	= RIS_REG & IM_REG;
	wire		wb_valid	= cyc_i & stb_i;
	wire		wb_we	= we_i & wb_valid;
	wire		wb_re	= ~we_i & wb_valid;
	wire[3:0]	wb_byte_sel	= sel_i & {4{wb_we}};
	wire		_clk_	= clk_i;
	wire		_rst_	= rst_i;
	wire		rd	= (wb_re & (adr_i==DATA_REG_ADDR));
	wire		wr	= (wb_we & (adr_i==DATA_REG_ADDR));

	EF_UART inst_to_wrap (
		.clk(_clk_),
		.rst_n(~_rst_),
		.prescale(prescale),
		.en(en),
		.rd(rd),
		.wr(wr),
		.wdata(wdata),
		.tx_empty(tx_empty),
		.tx_full(tx_full),
		.tx_level(tx_level),
		.rdata(rdata),
		.rx_empty(rx_empty),
		.rx_full(rx_full),
		.rx_level(rx_level),
		.RX(RX),
		.TX(TX)
	);

	always @ (posedge clk_i or posedge rst_i)
		if(rst_i) ack_o <= 1'b0;
		else
			if(wb_valid & ~ack_o)
				ack_o <= 1'b1;
			else
				ack_o <= 1'b0;

	`WB_REG(DATA_REG, 0)
	`WB_REG(PRESCALE_REG, 0)
	`WB_REG(TXFIFOTR_REG, 0)
	`WB_REG(RXFIFOTR_REG, 0)
	`WB_REG(CONTROL_REG, 0)

	`WB_ICR(6)

	always @ (posedge clk_i or posedge rst_i)
		if(rst_i) RIS_REG <= 32'd0;
		else begin
			if(_TX_EMPTY_FLAG_FLAG_) RIS_REG[0] <= 1'b1; else if(ICR_REG[0]) RIS_REG[0] <= 1'b0;
			if(_TX_FULL_FLAG_FLAG_) RIS_REG[1] <= 1'b1; else if(ICR_REG[1]) RIS_REG[1] <= 1'b0;
			if(_TX_BELOW_FLAG_FLAG_) RIS_REG[2] <= 1'b1; else if(ICR_REG[2]) RIS_REG[2] <= 1'b0;
			if(_RX_EMPTY_FLAG_FLAG_) RIS_REG[3] <= 1'b1; else if(ICR_REG[3]) RIS_REG[3] <= 1'b0;
			if(_RX_FULL_FLAG_FLAG_) RIS_REG[4] <= 1'b1; else if(ICR_REG[4]) RIS_REG[4] <= 1'b0;
			if(_RX_BELOW_FLAG_FLAG_) RIS_REG[5] <= 1'b1; else if(ICR_REG[5]) RIS_REG[5] <= 1'b0;

		end

	assign irq = |MIS_REG;

	assign	dat_o = 
			(adr_i == DATA_REG_ADDR) ? DATA_REG :
			(adr_i == PRESCALE_REG_ADDR) ? PRESCALE_REG :
			(adr_i == TXFIFOTR_REG_ADDR) ? TXFIFOTR_REG :
			(adr_i == RXFIFOTR_REG_ADDR) ? RXFIFOTR_REG :
			(adr_i == CONTROL_REG_ADDR) ? CONTROL_REG :
			(adr_i == RIS_REG_ADDR) ? RIS_REG :
			(adr_i == ICR_REG_ADDR) ? ICR_REG :
			(adr_i == IM_REG_ADDR) ? IM_REG :
			(adr_i == MIS_REG_ADDR) ? MIS_REG :
			32'hDEADBEEF;

endmodule
